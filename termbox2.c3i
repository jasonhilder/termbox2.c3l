module termbox2::tb;

const ushort TB_PATH_MAX = 4096;
const String TB_VERSION_STR = "2.5.0-dev";

/* TODO */
/* Ensure sane `TB_OPT_ATTR_W` (16, 32, or 64) */
const bool TB_OPT_EGC = true;
const char TB_OPT_ATTR_W = 64;

/* Define this to set the size of the buffer used in `tb_printf`
 * and `tb_sendf`
*/
const int TB_OPT_PRINTF_BUF = 4096;

/* Define this to set the size of the read buffer used when reading
 * from the tty
*/
const int TB_OPT_READ_BUF = 64;

/* ASCII key constants (`tb_event.key`) */
const uint TB_KEY_CTRL_TILDE =       0x00;
const uint TB_KEY_CTRL_2 =           0x00; // clash with `CTRL_TILDE`
const uint TB_KEY_CTRL_A =           0x01;
const uint TB_KEY_CTRL_B =           0x02;
const uint TB_KEY_CTRL_C =           0x03;
const uint TB_KEY_CTRL_D =           0x04;
const uint TB_KEY_CTRL_E =           0x05;
const uint TB_KEY_CTRL_F =           0x06;
const uint TB_KEY_CTRL_G =           0x07;
const uint TB_KEY_BACKSPACE =        0x08;
const uint TB_KEY_CTRL_H =           0x08; // clash with `CTRL_BACKSPACE`
const uint TB_KEY_TAB =              0x09;
const uint TB_KEY_CTRL_I =           0x09; // clash with `TAB`
const uint TB_KEY_CTRL_J =           0x0a;
const uint TB_KEY_CTRL_K =           0x0b;
const uint TB_KEY_CTRL_L =           0x0c;
const uint TB_KEY_ENTER =            0x0d;
const uint TB_KEY_CTRL_M =           0x0d; // clash with `ENTER`
const uint TB_KEY_CTRL_N =           0x0e;
const uint TB_KEY_CTRL_O =           0x0f;
const uint TB_KEY_CTRL_P =           0x10;
const uint TB_KEY_CTRL_Q =           0x11;
const uint TB_KEY_CTRL_R =           0x12;
const uint TB_KEY_CTRL_S =           0x13;
const uint TB_KEY_CTRL_T =           0x14;
const uint TB_KEY_CTRL_U =           0x15;
const uint TB_KEY_CTRL_V =           0x16;
const uint TB_KEY_CTRL_W =           0x17;
const uint TB_KEY_CTRL_X =           0x18;
const uint TB_KEY_CTRL_Y =           0x19;
const uint TB_KEY_CTRL_Z =           0x1a;
const uint TB_KEY_ESC =              0x1b;
const uint TB_KEY_CTRL_LSQ_BRACKET = 0x1b; // clash with 'ESC'
const uint TB_KEY_CTRL_3 =           0x1b; // clash with 'ESC'
const uint TB_KEY_CTRL_4 =           0x1c;
const uint TB_KEY_CTRL_BACKSLASH =   0x1c; // clash with 'CTRL_4'
const uint TB_KEY_CTRL_5 =           0x1d;
const uint TB_KEY_CTRL_RSQ_BRACKET = 0x1d; // clash with 'CTRL_5'
const uint TB_KEY_CTRL_6 =           0x1e;
const uint TB_KEY_CTRL_7 =           0x1f;
const uint TB_KEY_CTRL_SLASH =       0x1f; // clash with 'CTRL_7'
const uint TB_KEY_CTRL_UNDERSCORE =  0x1f; // clash with 'CTRL_7'
const uint TB_KEY_SPACE =            0x20;
const uint TB_KEY_BACKSPACE2 =       0x7f;
const uint TB_KEY_CTRL_8 =           0x7f; // clash with 'BACKSPACE2'

fn int tb_key_i(int i) { return 0xffff - i; };
/* Terminal-dependent key constants (`tb_event.key`) and terminfo caps */
const uint TB_KEY_F1 =               (0xffff - 0);
const uint TB_KEY_F2 =               (0xffff - 1);
const uint TB_KEY_F3 =               (0xffff - 2);
const uint TB_KEY_F4 =               (0xffff - 3);
const uint TB_KEY_F5 =               (0xffff - 4);
const uint TB_KEY_F6 =               (0xffff - 5);
const uint TB_KEY_F7 =               (0xffff - 6);
const uint TB_KEY_F8 =               (0xffff - 7);
const uint TB_KEY_F9 =               (0xffff - 8);
const uint TB_KEY_F10 =              (0xffff - 9);
const uint TB_KEY_F11 =              (0xffff - 10);
const uint TB_KEY_F12 =              (0xffff - 11);
const uint TB_KEY_INSERT =           (0xffff - 12);
const uint TB_KEY_DELETE =           (0xffff - 13);
const uint TB_KEY_HOME =             (0xffff - 14);
const uint TB_KEY_END =              (0xffff - 15);
const uint TB_KEY_PGUP =             (0xffff - 16);
const uint TB_KEY_PGDN =             (0xffff - 17);
const uint TB_KEY_ARROW_UP =         (0xffff - 18);
const uint TB_KEY_ARROW_DOWN =       (0xffff - 19);
const uint TB_KEY_ARROW_LEFT =       (0xffff - 20);
const uint TB_KEY_ARROW_RIGHT =      (0xffff - 21);
const uint TB_KEY_BACK_TAB =         (0xffff - 22);
const uint TB_KEY_MOUSE_LEFT =       (0xffff - 23);
const uint TB_KEY_MOUSE_RIGHT =      (0xffff - 24);
const uint TB_KEY_MOUSE_MIDDLE =     (0xffff - 25);
const uint TB_KEY_MOUSE_RELEASE =    (0xffff - 26);
const uint TB_KEY_MOUSE_WHEEL_UP =   (0xffff - 27);
const uint TB_KEY_MOUSE_WHEEL_DOWN = (0xffff - 28);

const uint TB_CAP_F1 =               0;
const uint TB_CAP_F2 =               1;
const uint TB_CAP_F3 =               2;
const uint TB_CAP_F4 =               3;
const uint TB_CAP_F5 =               4;
const uint TB_CAP_F6 =               5;
const uint TB_CAP_F7 =               6;
const uint TB_CAP_F8 =               7;
const uint TB_CAP_F9 =               8;
const uint TB_CAP_F10 =              9;
const uint TB_CAP_F11 =              10;
const uint TB_CAP_F12 =              11;
const uint TB_CAP_INSERT =           12;
const uint TB_CAP_DELETE =           13;
const uint TB_CAP_HOME =             14;
const uint TB_CAP_END =              15;
const uint TB_CAP_PGUP =             16;
const uint TB_CAP_PGDN =             17;
const uint TB_CAP_ARROW_UP =         18;
const uint TB_CAP_ARROW_DOWN =       19;
const uint TB_CAP_ARROW_LEFT =       20;
const uint TB_CAP_ARROW_RIGHT =      21;
const uint TB_CAP_BACK_TAB =         22;
const uint TB_CAP__COUNT_KEYS =      23;
const uint TB_CAP_ENTER_CA =         23;
const uint TB_CAP_EXIT_CA =          24;
const uint TB_CAP_SHOW_CURSOR =      25;
const uint TB_CAP_HIDE_CURSOR =      26;
const uint TB_CAP_CLEAR_SCREEN =     27;
const uint TB_CAP_SGR0 =             28;
const uint TB_CAP_UNDERLINE =        29;
const uint TB_CAP_BOLD =             30;
const uint TB_CAP_BLINK =            31;
const uint TB_CAP_ITALIC =           32;
const uint TB_CAP_REVERSE =          33;
const uint TB_CAP_ENTER_KEYPAD =     34;
const uint TB_CAP_EXIT_KEYPAD =      35;
const uint TB_CAP_DIM =              36;
const uint TB_CAP_INVISIBLE =        37;
const uint TB_CAP__COUNT =           38;

/* Some hard-coded caps */
const String TB_HARDCAP_ENTER_MOUSE =  "\x1b[?1000h\x1b[?1002h\x1b[?1015h\x1b[?1006h";
const String TB_HARDCAP_EXIT_MOUSE =   "\x1b[?1006l\x1b[?1015l\x1b[?1002l\x1b[?1000l";
const String TB_HARDCAP_STRIKEOUT =    "\x1b[9m";
const String TB_HARDCAP_UNDERLINE_2 =  "\x1b[21m";
const String TB_HARDCAP_OVERLINE =     "\x1b[53m";

/* Colors (numeric) and attributes (bitwise) (`tb_cell.fg`, `tb_cell.bg`) */
const uint TB_DEFAULT =              0x0000;
const uint TB_BLACK =                0x0001;
const uint TB_RED =                  0x0002;
const uint TB_GREEN =                0x0003;
const uint TB_YELLOW =               0x0004;
const uint TB_BLUE =                 0x0005;
const uint TB_MAGENTA =              0x0006;
const uint TB_CYAN =                 0x0007;
const uint TB_WHITE =                0x0008;

/*
@TODO: handle TB_OPT_ATTR_W == 16
#define TB_BOLD      0x0100
#define TB_UNDERLINE 0x0200
#define TB_REVERSE   0x0400
#define TB_ITALIC    0x0800
#define TB_BLINK     0x1000
#define TB_HI_BLACK  0x2000
#define TB_BRIGHT    0x4000
#define TB_DIM       0x8000
#define TB_256_BLACK TB_HI_BLACK // `TB_256_BLACK` is deprecated
*/
const uint TB_BOLD =                0x01000000;
const uint TB_UNDERLINE =           0x02000000;
const uint TB_REVERSE =             0x04000000;
const uint TB_ITALIC =              0x08000000;
const uint TB_BLINK =               0x10000000;
const uint TB_HI_BLACK =            0x20000000;
const uint TB_BRIGHT =              0x40000000;
const uint TB_DIM =                 0x80000000;
const uint TB_TRUECOLOR_BOLD =      TB_BOLD; // `TB_TRUECOLOR_*` is deprecated
const uint TB_TRUECOLOR_UNDERLINE = TB_UNDERLINE;
const uint TB_TRUECOLOR_REVERSE =   TB_REVERSE;
const uint TB_TRUECOLOR_ITALIC =    TB_ITALIC;
const uint TB_TRUECOLOR_BLINK =     TB_BLINK;
const uint TB_TRUECOLOR_BLACK =     TB_HI_BLACK;

const ulong TB_STRIKEOUT =   0x0000000100000000;
const ulong TB_UNDERLINE_2 = 0x0000000200000000;
const ulong TB_OVERLINE =    0x0000000400000000;
const ulong TB_INVISIBLE =   0x0000000800000000;

/* Event types (`tb_event.type`) */
const char TB_EVENT_KEY =        1;
const char TB_EVENT_RESIZE =     2;
const char TB_EVENT_MOUSE =      3;

/* Key modifiers (bitwise) (`tb_event.mod`) */
const char TB_MOD_ALT =          1;
const char TB_MOD_CTRL =         2;
const char TB_MOD_SHIFT =        4;
const char TB_MOD_MOTION =       8;

/* Input modes (bitwise) (`tb_set_input_mode`) */
const char TB_INPUT_CURRENT =    0;
const char TB_INPUT_ESC =        1;
const char TB_INPUT_ALT =        2;
const char TB_INPUT_MOUSE =      4;

/* Output modes (`tb_set_output_mode`) */
const char TB_OUTPUT_CURRENT =   0;
const char TB_OUTPUT_NORMAL =    1;
const char TB_OUTPUT_256 =       2;
const char TB_OUTPUT_216 =       3;
const char TB_OUTPUT_GRAYSCALE = 4;
/*
@TODO:
#if TB_OPT_ATTR_W >= 32
#define TB_OUTPUT_TRUECOLOR 5
#endif
*/

/* Common function return values unless otherwise noted.
 *
 * Library behavior is undefined after receiving `TB_ERR_MEM`. Callers may
 * attempt reinitializing by freeing memory, invoking `tb_shutdown`, then
 * `tb_init`.
*/
const char TB_OK =                   0;
const char TB_ERR =                  -1;
const char TB_ERR_NEED_MORE =        -2;
const char TB_ERR_INIT_ALREADY =     -3;
const char TB_ERR_INIT_OPEN =        -4;
const char TB_ERR_MEM =              -5;
const char TB_ERR_NO_EVENT =         -6;
const char TB_ERR_NO_TERM =          -7;
const char TB_ERR_NOT_INIT =         -8;
const char TB_ERR_OUT_OF_BOUNDS =    -9;
const char TB_ERR_READ =             -10;
const char TB_ERR_RESIZE_IOCTL =     -11;
const char TB_ERR_RESIZE_PIPE =      -12;
const char TB_ERR_RESIZE_SIGACTION = -13;
const char TB_ERR_POLL =             -14;
const char TB_ERR_TCGETATTR =        -15;
const char TB_ERR_TCSETATTR =        -16;
const char TB_ERR_UNSUPPORTED_TERM = -17;
const char TB_ERR_RESIZE_WRITE =     -18;
const char TB_ERR_RESIZE_POLL =      -19;
const char TB_ERR_RESIZE_READ =      -20;
const char TB_ERR_RESIZE_SSCANF =    -21;
const char TB_ERR_CAP_COLLISION =    -22;

const char TB_ERR_SELECT =           TB_ERR_POLL;
const char TB_ERR_RESIZE_SELECT =    TB_ERR_RESIZE_POLL;

/* Deprecated. Function types to be used with `tb_set_func`. */
const char TB_FUNC_EXTRACT_PRE =     0;
const char TB_FUNC_EXTRACT_POST =    1;

// LOC: 379 